{"version":3,"file":"static/js/461.4e4e197b.chunk.js","mappings":"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","sources":["pages/profil/profil.tsx","pages/representations/forge-viewer/Forgeview.js"],"sourcesContent":["import React, { useEffect, useRef, useState} from 'react';\nimport './profil.scss';\nimport {useDispatch, useSelector} from \"../../hooks\";\nimport {\n    ForgeResponseState, getCheckStatus,\n    getForgeToken, setURN, URNLoadState,\n} from \"../../services/redux/reducers/forge/forge.slice\";\nimport ForgeViewer from \"../representations/forge-viewer/Forgeview\";\nimport axios from \"axios\";\nimport {getConfig} from \"../../utils/config\";\nimport {Loader} from \"react-bootstrap-typeahead\";\n\n\nconst Profil = () => {\n    const forgeRef = useRef<any>();\n    const dispatch = useDispatch();\n    const [uploaded, setUploaded] = useState(false);\n    const forgeToken = useSelector<ForgeResponseState>((state) => state.forge);\n    const urn = useSelector<String>((state) => state.urn.urn);\n    const urn_load = useSelector<URNLoadState | null>((state) => state.urn_load.response.content);\n    let time_load = 3000;\n\n    useEffect(() => {\n        dispatch(getForgeToken());\n    }, []);\n\n\n    const onUpload = (e:any) => {\n        if (e.target.files[0]) {\n            const file = new FormData()\n            file.append(\"file\", e.target.files[0]);\n            axios.post(getConfig().urlHostApi+\"/public/forge/upload\", file).then((res) => {\n                if (res.data.content.result === \"success\") {\n                    dispatch(setURN(res.data.content.urn))\n                    dispatch(getCheckStatus(res.data.content.urn))\n                }\n            })\n        }\n    }\n\n    const getUploadCheck = () => {\n        dispatch(getCheckStatus(urn));\n    }\n\n    useEffect(() => {\n        if (urn_load?.status !== \"success\") {\n            if (urn.length > 0) {\n                setTimeout(() => {\n                    getUploadCheck();\n                    time_load += 1500;\n                }, time_load)\n            }\n        } else {\n            setUploaded(true)\n        }\n    }, [urn_load]);\n\n\n    // @ts-ignore\n    return (\n        <div className={\"profil_layout\"}>\n            <div className={\"profil-container\"} ref={forgeRef}>\n                {!(urn.length > 0) && (\n                    <input type=\"file\" name=\"upload\" onChange={(e) => onUpload(e)}/>\n                )}\n                {!uploaded && urn.length > 0 && (\n                    <p>{urn_load?.status}</p>\n                )}\n                {forgeToken.response.content?.access_token && urn.length > 0 && uploaded && (\n                    <ForgeViewer\n                    version=\"6.0\"\n                    expiresAt={3599}\n                    token={forgeToken.response.content?.access_token}\n                    urn={urn}\n                    headless={false}\n                    onSelectedGuid={\"\"} />\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Profil;\n","import React from 'react';\nimport Measure from 'react-measure'\n\n\nclass ForgeViewer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.docs = [];\n        this.views = {};\n        this.state = { enable: false, error: false, empty: true };\n        this.viewerDiv = React.createRef();\n        this.viewer = null;\n        this.resizeHandling = null;\n\n        //if urn already given when component is created\n        if (typeof props.urn !== 'undefined' && props.urn !== '')\n            this.docs.push(props.urn);\n\n        this.state = {\n            dimensions: {\n                width: -1,\n                height: -1,\n            },\n        };\n    }\n\n    componentDidMount() {\n        console.log(\"Comp model\");\n        this.handleScriptLoad.bind(this);\n        this.handleScriptLoad();\n    }\n\n\n    componentWillUnmount() {\n        console.log('React Forge Viewer unmounting...')\n        if (this.viewer) {\n            this.viewer.removeEventListener(window.Autodesk.Viewing.SELECTION_CHANGED_EVENT, this.onSelectionEvent);\n            this.viewer.tearDown()\n            this.viewer.finish()\n            this.viewer = null\n            console.log('React Forge Viewer destroyed.')\n        }\n    }\n\n    //https://stackoverflow.com/questions/59634414/how-to-get-xyz-coordinates-from-a-selected-component-in-viewer\n    getForgeToken = () => {\n        /* Normally, this would call an endpoint on your server to generate a public\n        access token (using your client id and sercret). Doing so should yield a\n        response that looks something like the following...\n    https://forge.autodesk.com/en/docs/design-automation/v3/tutorials/revit/step2-create-forge-app/\n\n    curl -i -X POST \"https://developer.api.autodesk.com/authentication/v1/authenticate\"  -H \"Content-Type: application/x-www-form-urlencoded\"  -d \"client_id=m5mWe0em222b5cuGEykzedV5BusIZVeJ\"  -d \"client_secret=C140cdab866404f3\" -d \"grant_type=client_credentials\"  -d \"scope=code:all data:write data:read bucket:create bucket:delete\"\n\n    Pour l'urn :\n    //https://models.autodesk.io/\n        */\n        return {\n            access_token: this.props.token,\n            expires_in: 3599,//this.props.expiresAt,\n            token_type: \"Bearer\"\n        };\n    }\n\n\n    /* Once the viewer has initialized, it will ask us for a forge token so it can\n    access the specified document. */\n    handleTokenRequested = (onAccessToken) => {\n        console.log('Token requested by the viewer.');\n        if (onAccessToken) {\n            let token = this.getForgeToken();\n            console.log(\"Token : \" + token.access_token);\n            if (token)\n                onAccessToken(\n                    token.access_token, token.expires_in);\n        }\n    }\n\n\n    /* after the viewer loads a document, we need to select which viewable to\n  display in our component */\n    handleDocumentLoaded = (doc, viewables) => {\n        if (viewables.length === 0) {\n            console.error('Document contains no viewables.');\n        }\n        else {\n            //Select the first viewable in the list to use in our viewer component\n            console.log('handleDocumentLoaded:', viewables[0]);\n            // this.view =  viewables[0];\n            this.setViews(viewables);\n            this.forceUpdate();\n        }\n    }\n\n\n    handleLoadModelSuccess(model) {\n        console.log(window.Autodesk.Viewing);\n        console.log('Model successfully loaded by Forge Viewer.', model);\n        if (this.props.onModelLoad)\n            this.props.onModelLoad(this.viewer, model);\n    }\n\n    handleLoadModelError(errorCode) {\n        this.setState({ error: true });\n\n        console.error('Error loading Forge model - errorCode:' + errorCode);\n        if (this.props.onModelError)\n            this.props.onModelError(errorCode);\n    }\n\n    handleViewerError(errorCode) {\n        this.setState({ error: true });\n\n        console.error('Error loading Forge Viewer. - errorCode:', errorCode);\n        if (this.props.onViewerError)\n            this.props.onViewerError(errorCode);\n    }\n\n\n\n\n\n    handleScriptLoad() {\n        console.log('Autodesk scripts have finished loading.');\n        let options = {\n            env: 'AutodeskProduction', getAccessToken: this.handleTokenRequested\n        };\n\n        window.Autodesk.Viewing.Initializer(\n            options, this.handleViewerInit.bind(this));\n    }\n\n    handleViewerInit() {\n        console.log('Forge Viewer has finished initializing.');\n\n        if (this.props.proxy) {\n            window.Autodesk.Viewing.endpoint.setEndpointAndApi(this.props.proxy, 'derivativeV2')\n        }\n\n        let container = this.viewerDiv.current;\n\n        // Create Viewer instance so we can load models.\n        if (this.props.headless) {\n            this.viewer = new window.Autodesk.Viewing.Viewer3D(container);\n        } else {\n            this.viewer = new window.Autodesk.Viewing.Private.GuiViewer3D(container);\n        }\n\n        console.log('Starting the Forge Viewer...');\n        var errorCode = this.viewer.start();\n        if (!errorCode) {\n            console.log('Forge Viewer has successfully started.');\n            this.setState({ enable: true });\n            this.reviewDocuments();\n        } else {\n            console.error('Error starting Forge Viewer - code:', errorCode);\n            this.handleViewerError(errorCode);\n        }\n\n        this.viewer.addEventListener(window.Autodesk.Viewing.SELECTION_CHANGED_EVENT, this.onSelectionEvent);\n    }\n\n    onSelectionEvent = (event) => {\n        let self = this;\n        var currSelection = this.viewer.getSelection();\n\n\n        var instanceTree = self.viewer.model.getData().instanceTree;\n\n        if (event.dbIdArray.length === 1) {\n            let iParent = 0;\n            let parentId = event.dbIdArray[0];\n            let found = undefined;\n            let dbIds = [parentId];\n            while (parentId) {\n                parentId = instanceTree.getNodeParentId(parentId)\n                dbIds.push(parentId);\n            }\n            self.viewer.model.getBulkProperties(dbIds, ['GUID'],\n                function(elements){\n\n                    if(elements && elements.length>0)\n                    {\n                        // the first if in list is the IFC guid of the selected object\n                        let guid = elements[0].properties[0].displayValue;\n                        console.log(\"GUID!!!!\");\n                        self.props.onSelectedGuid(guid);\n\n                    }\n\n\n                    /*for(var i=0; i<elements.length; i++){\n                        let guid = elements[i].properties[0].displayValue;\n                        console.log(\"GLOBALID:\" + guid);// + \" = \" + instanceTree.getNodeName());\n                      }*/\n                });\n        }\n\n\n        //\tthis.viewer.select([parentId]);\n        //}\n    }\n\n\n    handleLoadDocumentSuccess(doc) {\n        console.log(\"Forge viewer has successfully loaded document:\", doc);\n\n        let views = doc.getRoot().search(\n            { 'type': 'geometry' }, true\n        );\n\n        //augment viewables with the doc they came from\n        views.forEach(viewable => {\n            viewable.doc = doc;\n        })\n\n        //raise an event so caller can select a viewable to display\n        this.handleDocumentLoaded(doc, views);\n    }\n\n    handleLoadDocumentError(errorCode) {\n        this.setState({ error: true });\n\n        console.error('Error loading Forge document - errorCode:' + errorCode);\n        if (this.props.onDocumentError)\n            this.props.onDocumentError(errorCode);\n    }\n\n    clearErrors() {\n        this.setState({ error: false });\n    }\n\n    clearViews() {\n        this.views = {};\n        if (this.viewer) {\n            //restart viewer, for lack of ability to unload models\n            this.viewer.tearDown();\n            this.viewer.start();\n        }\n    }\n\n    reviewDocuments() {\n        if (this.viewer) {\n            this.clearErrors();\n            console.log('reviewing documents...');\n            let keys = Object.keys(this.docs);\n            this.setState({ empty: (this.docs.length === 0) });\n            this.docs.forEach(urn => {\n                this.loadDocument(urn);\n            });\n        }\n    }\n\n    loadDocument(urn) {\n        console.log('Forge Viewer is loading document:', urn);\n\n        let documentId = `urn:${urn}`;\n        let successHandler = this.handleLoadDocumentSuccess.bind(this);\n        let errorHandler = this.handleLoadDocumentError.bind(this);\n\n        window.Autodesk.Viewing.Document.load(\n            documentId, successHandler, errorHandler\n        );\n    }\n\n    loadView(view) {\n        console.log('loading view:', view.guid);\n        this.views[view.viewableID] = view;\n\n        let svfUrl = view.doc.getViewablePath(view);\n        let successHandler = this.handleLoadModelSuccess.bind(this);\n        let errorHandler = this.handleLoadModelError.bind(this);\n        let modelOptions = {\n            sharedPropertyDbPath: view.doc.getFullPath()\n        };\n\n        //load the specified model\n        this.viewer.loadModel(\n            svfUrl, modelOptions, successHandler, errorHandler\n        );\n    }\n\n    isArrayDifferent(current, next) {\n        if (current == null && next == null)\n            return false;\n        else if (current == null || next == null)\n            return true;\n        else if (current.length !== next.length)\n            return true;\n\n        for (var i = 0; i < current.length; i++)\n            if (current[i] !== next[i])\n                return true;\n        return false;\n    }\n\n    shouldComponentUpdateURN(nextProps, nextState) {\n        this.clearViews();\n        //console.log('props urn:', this.props.urn, ' next props urn:', nextProps.urn)\n        //new urn is null, empty or empty array\n        if (!nextProps.urn || nextProps.urn === '' || typeof nextProps.urn === 'undefined' ||\n            (Array.isArray(nextProps.urn) && nextProps.urn.length === 0)) {\n            //clear out views if any document was previously loaded\n            if (this.docs.length > 0) {\n                this.setDocuments([]);\n            }\n        } else if (Array.isArray(nextProps.urn)) {\n            //always have to check array because equivalence is per element\n            if (this.isArrayDifferent(this.props.urn, nextProps.urn)) {\n                this.setDocuments(nextProps.urn);\n            }\n        } else if (nextProps.urn !== this.props.urn) {\n            this.setDocuments([nextProps.urn]);\n            this.loadDocument([nextProps.urn]);\n\n        }\n        else\n            this.loadDocument([nextProps.urn]);\n    }\n\n    shouldComponentUpdateView(nextProps, nextState) {\n\n        //the view property is empty, undefined, or empty array\n        if (!nextProps.view || typeof nextProps.view === 'undefined' ||\n            (Array.isArray(nextProps.view) && nextProps.view.length === 0)) {\n            if (Object.keys(this.views).length > 0)\n                this.clearViews();\n        } else if (Array.isArray(nextProps.view)) {\n            if (this.isArrayDifferent(this.props.view, nextProps.view)) {\n                this.setViews(nextProps.view);\n            }\n        } else if (this.props.view !== nextProps.view) {\n            this.setViews([nextProps.view]);\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        this.shouldComponentUpdateURN(nextProps, nextState);\n        this.shouldComponentUpdateView(nextProps, nextState);\n        return true;\n    }\n\n    setDocuments(list) {\n        this.docs = list;\n        this.clearViews();\n        this.reviewDocuments(); //defer loading until viewer ready\n    }\n\n    setViews(list) {\n        //check to see if views were added or removed from existing list\n        let existing = Object.assign({}, this.views);\n        let incremental = [];\n        list.forEach(view => {\n            if (existing.hasOwnProperty(view.viewableID))\n                //the view was previously in the list\n                delete existing[view.viewableID];\n            else {\n                //the view is newly added to the list\n                incremental.push(view);\n            }\n        });\n\n        //anything left in old's keys should be unloaded\n        let keys = Object.keys(existing);\n        if (keys.length > 0) {\n            //views were removed, so restart viewer for lack of 'unload'\n            this.viewer.tearDown();\n            this.viewer.start();\n            list.forEach(view => {\n                this.loadView(view);\n            });\n        } else {\n            //load views incrementally rather than a complete teardown\n            incremental.forEach(view => {\n                this.loadView(view);\n            });\n        }\n    }\n\n    handleResize(rect) {\n        this.setState({ dimensions: rect.bounds })\n        //cancel any previous handlers that were dispatched\n        if (this.resizeHandling)\n            clearTimeout(this.resizeHandling)\n\n        //defer handling until resizing stops\n        this.resizeHandling = setTimeout(() => {\n            if (this.viewer) this.viewer.resize()\n        }, 100)\n    }\n\n    render() {\n\n        return (\n            <Measure bounds onResize={this.handleResize.bind(this)}>\n                {({ measureRef }) =>\n                    <div ref={measureRef} className=\"ForgeViewerContainer\">\n                        <div ref={this.viewerDiv} className=\"ForgeViewer\" style={{ height: (this.state.dimensions.height) }}></div>\n\n                        {this.state.empty &&\n                            <div className=\"scrim\">\n                                <div className=\"message\">\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M12.89 1.45l8 4A2 2 0 0 1 22 7.24v9.53a2 2 0 0 1-1.11 1.79l-8 4a2 2 0 0 1-1.79 0l-8-4a2 2 0 0 1-1.1-1.8V7.24a2 2 0 0 1 1.11-1.79l8-4a2 2 0 0 1 1.78 0z\"></path><polyline points=\"2.32 6.16 12 11 21.68 6.16\"></polyline><line x1=\"12\" y1=\"22.76\" x2=\"12\" y2=\"11\"></line></svg>\n                                </div>\n                            </div>\n                        }\n\n                        {this.state.error &&\n                            <div className=\"scrim\">\n                                <div className=\"message\">\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"></line><line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"16\"></line></svg>\n                                    <div>Viewer Error</div>\n                                </div>\n                            </div>\n                        }\n\n                        {!this.state.enable &&\n                            <div className=\"scrim\">\n                                <div className=\"message\">\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><polygon points=\"13 2 3 14 12 14 11 22 21 10 12 10 13 2\"></polygon></svg>\n                                    <div>Starting Viewer...</div>\n                                </div>\n                            </div>\n                        }\n                    </div>\n                }\n            </Measure>\n        );\n    }\n}\nexport default ForgeViewer;"],"names":["forgeRef","useRef","dispatch","useDispatch","useState","uploaded","setUploaded","forgeToken","useSelector","state","forge","urn","urn_load","response","content","time_load","useEffect","getForgeToken","status","length","setTimeout","getCheckStatus","className","ref","type","name","onChange","e","target","files","file","FormData","append","axios","getConfig","urlHostApi","then","res","data","result","setURN","onUpload","access_token","version","expiresAt","token","headless","onSelectedGuid","ForgeViewer","props","expires_in","token_type","handleTokenRequested","onAccessToken","console","log","handleDocumentLoaded","doc","viewables","error","setViews","forceUpdate","onSelectionEvent","event","self","instanceTree","viewer","getSelection","model","getData","dbIdArray","parentId","dbIds","getNodeParentId","push","getBulkProperties","elements","guid","properties","displayValue","docs","views","enable","empty","viewerDiv","React","resizeHandling","dimensions","width","height","this","handleScriptLoad","bind","removeEventListener","window","Autodesk","Viewing","SELECTION_CHANGED_EVENT","tearDown","finish","onModelLoad","errorCode","setState","onModelError","onViewerError","options","env","getAccessToken","Initializer","handleViewerInit","proxy","endpoint","setEndpointAndApi","container","current","Viewer3D","Private","GuiViewer3D","start","handleViewerError","reviewDocuments","addEventListener","getRoot","search","forEach","viewable","onDocumentError","clearErrors","Object","keys","loadDocument","documentId","successHandler","handleLoadDocumentSuccess","errorHandler","handleLoadDocumentError","Document","load","view","viewableID","svfUrl","getViewablePath","handleLoadModelSuccess","handleLoadModelError","modelOptions","sharedPropertyDbPath","getFullPath","loadModel","next","i","nextProps","nextState","clearViews","Array","isArray","setDocuments","isArrayDifferent","shouldComponentUpdateURN","shouldComponentUpdateView","list","existing","assign","incremental","hasOwnProperty","loadView","rect","bounds","clearTimeout","resize","onResize","handleResize","measureRef","style","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","points","x1","y1","x2","y2","cx","cy","r"],"sourceRoot":""}